services:
    nginx:
        image: nginx:1.24-alpine
        container_name: jobberwocky_server
        ports:
            - "80:80"
        depends_on:
            php:
                condition: service_healthy
        volumes:
            - .:/var/www
            - ./docker/nginx/nginx-default.conf:/etc/nginx/conf.d/default.conf
        networks:
            - jobberwocky_network

    php:
        build:
            context: .
            dockerfile: docker/Dockerfile
        container_name: jobberwocky_api
        volumes:
            - .:/var/www/
            - ./storage:/var/www/storage
            - ./bootstrap/cache:/var/www/bootstrap/cache
        depends_on:
            mongo:
                condition: service_healthy
        healthcheck:
            test: [ "CMD", "php", "-r", "echo 'OK';" ]
            interval: 5s
            retries: 3
        networks:
            - jobberwocky_network

    mongo:
        image: mongo:7.0
        container_name: jobberwocky_mongo
        restart: always
        ports:
            -   "27017:27017"
        networks:
            - jobberwocky_network
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: secret
            MONGO_INITDB_DATABASE: jobberwocky_jobs
        volumes:
            - mongo_data:/data/db
        healthcheck:
            test: [ "CMD", "mongosh", "--quiet", "--eval", "db.runCommand('ping').ok", "--host", "localhost:27017", "--username", "admin", "--password", "secret", "--authenticationDatabase", "admin" ]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 5s

    mongo-express:
        image: mongo-express
        container_name: mongo_express_viewer
        restart: always
        ports:
            - "8081:8081"
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: admin
            ME_CONFIG_MONGODB_ADMINPASSWORD: secret
            ME_CONFIG_MONGODB_URL: mongodb://admin:secret@mongo:27017/
        depends_on:
            mongo:
                condition: service_healthy
        networks:
            - jobberwocky_network

    extra_source_api:
        build:
            context: ./docker/extra-source
            dockerfile: Dockerfile
        container_name: avature_external_api
        restart: always
        volumes:
            - ./docker/extra_source:/app
        ports:
            - "8080:8080"
        networks:
            - jobberwocky_network
        environment:
            - NODE_ENV=production
volumes:
    mongo_data:

networks:
    jobberwocky_network:
        driver: bridge

